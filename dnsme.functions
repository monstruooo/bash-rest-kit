#!/bin/bash

function dnsme_js2table () {

	{
echo -e "Id \t Name \t Type \t TTL \t Value" ;
/bin/cat /dev/stdin |
jq -r '.data | sort_by(.type) | .[] |
(.id | tostring) 
	+ " \t " + 
(if .name == "" then "@" else .name end) 
	+ " \t " + 
.type 
	+ " \t " + 
(.ttl | tostring) 
	+ " \t " + 
.value' ; 
	} | 
tabs2cols
} # end function

function dnsme_domain_rm () {
local id
args_to_vars "$@"
dnsme_api V2.0/dns/managed/$id -X DELETE -d "[$id]"
}

function dnsme_record_rm () {
local domain domain_id ids 
args_to_vars "$@"
read -r domain_id domain_id < <(dnsme_domain_id $domain) 
[[ -n $domain_id ]] || return 1
[[ -z $ids ]] && return 2
ids=$(echo $ids) # second and every next record id to have exactly one leading space
ids=${ids// /&ids=}
dnsme_api V2.0/dns/managed/$domain_id/records?ids=$ids -X DELETE
}

function dnsme_domain_mk () {
local domain json data
args_to_vars "$@"
data=$(args2json "$@")
if [[  -n $domain ]] ; then
	data=$( jq -n "$data | { name: .domain }")
    dnsme_api V2.0/dns/managed/ -X POST -d "$data" | jq .
else
	return 1
fi
}

function dnsme_record_mk () {
local domain id name type value ttl json data
args_to_vars "$@"
data=$(args2json "$@")

data=$( echo "$data" | jq 'if .name=="@" then .name="" else . end')
name=${name/@/}

local domain_id
read -r domain_id domain_id < <( dnsme_domain_id $domain) 
[[ -n $domain_id ]] || return 1
data=$( jq -n "$data | del(.domain)")

if [[ -z $ttl ]] ; then
	ttl=1800
	data=$( jq -n "$data | .ttl=$ttl")
fi

local res record_count
flow='If no id and not naked record'
if [[ -z $id && ! x$name == x ]] ; then
	res=$(dnsme_get $domain |
	jq '.data[] | select(.name=="'$name'")' |
	jq -s '{ data: . }') # end res=$(

	if ! record_count=$( jq -e -n -r "$res | .data | length" 2>/dev/zero) ; then
		jqres code=1 src=${FUNCNAME[0]} msg="Something is wrong. Can not count records" 1>&2 
		return 1
	fi

	if (( record_count == 0 )) ; then
		info="Do nothing. Record id is already unset"
	elif (( record_count == 1 )) ; then
   		id=$( $jq -r -n "$res | .data[0].id")
	elif (( record_count > 1 )) ; then
   		jqres code=1 src=${FUNCNAME[0]} msg="$record_count identical records \"$name\" with value $value"
   		return 1
	fi
fi

# Adding/updating records.
if [[ -n $id ]] ; then
    local old_value=$( dnsme_get $domain | $jq -r ".data[] | select(.id==$id) | .value" )
    local data=$(jq -n "$data | .id=$id")
    jqres src=${FUNCNAME[0]} msg="Updating record. No output expected on success" name=$name value=$value old_value=$old_value
    dnsme_api V2.0/dns/managed/$domain_id/records/$id -X PUT -d "$data" | jq
else
    dnsme_api V2.0/dns/managed/$domain_id/records/ -X POST -d "$data" | jq
fi
} # function dnsme_mk
