#!/bin/bash

function dnsme_mk () {
local domain domain_id serial id name type value ttl json data
args2vars "$@"
if [[ -z $type ]] ; then 
	data=$( jq -n "{ name: \"$domain\" }")
    dnsme_api V2.0/dns/managed/ -X POST -d "$data" 
	return
fi

dnsme domain id $domain > /dev/zero || return
domain_id=$(echo $res | jq -r .id)
domain=$(echo $res | jq -r .name)

data=$(args2json "$@")
data=$( echo "$data" | jq 'if .name=="@" then .name="" else . end')
name=${name/@/}

data=$( jq -n "$data | del(.domain)")

if [[ -z $ttl ]] ; then
	ttl=1800
	data=$( jq -n "$data | .ttl=$ttl")
fi

local records record_count
flow='If no id provided and not naked record, check if record already exists and get its ip'
if [[ -z $id && ! x$name == x ]] ; then

	if ! records=$(dnsme ls $domain ) ; then
		args2json src=${FUNCNAME[0]} msg="Something is wrong. Can't fetch existing domain records" | jq . | api_err
		return 5
	fi

	records=$( echo "$records" | egrep "\s${name//./\\.}\s+${type}\s" )
	record_count=$( echo "$records" | egrep '\S' | wc -l )
	if (( record_count == 0 )) ; then
		info="Do nothing. Record id is not set anyway"
	elif (( record_count == 1 )) ; then
   		id=$(echo $records | egrep -o ^[0-9]+)
	elif (( record_count > 1 )) ; then
		local msg
		msg=$(echo $record_count identical records \"$name\" of type $type | jq -R . )
   		args2json src=${FUNCNAME[0]} msg="$msg" | jq -c . 1>&2
   		return 1
	fi
fi

# Adding/updating records.
if [[ -n $id ]] ; then
    local old_data=$( dnsme ls $domain > /dev/zero ; echo $res | $jq --argjson id $id '.data[] | select(.id==$id)' )
    local data=$(jq -n "$data | .id=$id")
    res_info=$(args2json src=${FUNCNAME[0]} msg="Updating record. No output expected on success" name=$name new_data="$data" old_data="$old_data")
    dnsme_api V2.0/dns/managed/$domain_id/records/$id -X PUT -d "$data"
else
    dnsme_api V2.0/dns/managed/$domain_id/records/ -X POST -d "$data"
fi 
} # function dnsme_mk

function dnsme_rm () {
local domain=$1 domain_id 
shift
read -r domain_id serial domain < <(dnsme_domain_id $domain)
if [[ -z $1 ]] ; then
	if [[ -z $domain ]] ; then
		echo No such domain $domain 1>&2
		return 1
	fi
	read -n 1 -p "Y/y to delete domain $domain: " ; read_nl
	if [[ x$REPLY == x[Yy] ]] ; then
		dnsme_api V2.0/dns/managed/$domain_id -X DELETE -d "[$domain_id]" &&
		args2json msgs="Domain $domain deleted" 1>&2
	fi
else
	ids=$(echo $*) # second and every next record id to have exactly one leading space
	ids=${ids// /&ids=}
	dnsme_api V2.0/dns/managed/$domain_id/records?ids=$ids -X DELETE &&
	args2json msgs="Deleted records $*" | jq . 1>&2
fi
} # end function dnsme_rm
