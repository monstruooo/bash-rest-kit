#!/bin/bash

function incap_cfg () {
[[ -z $incap_api_id ]] && read -s "API Key: " incap_api_id
[[ -z $incap_api_key ]] && read -s "API Key: " incap_api_id
}

function incap_set () {
cat << EOF
Incapsula tmp dir
Incapsula context
incapsula ID
Incapsula Name
EOF
}

function incap_mount () {
local alias="cc pwd context ll js mk dl updatedb set_ip purge" cmd
if [[ -n $incap_ps1_saved ]] ; then
	PS1="$incap_ps1_saved"
	unset incap_ps1_saved

	for cmd in $alias ; do
		unalias $cmd
	done
	alias ll="ls -l "
	echo incap mount OFF
else
	[[ x$2 == x[Oo][Ff][Ff] ]] && { echo incap $1 OFF ; return ; }
	incap_ps1_saved="$PS1"
	PS1='$(incap pwd) ]$ '

	for cmd in $alias ; do
		alias $cmd="incap $cmd "
	done
	echo incap mount ON
fi
} # end function 

function incap_context () {
case $incap_path_wd in
	accounts)
		[[ -n $incap_path_id ]] && echo account || echo accounts
		;;
	sites)
		[[ -n $incap_path_id ]] && echo site || echo sites
		;;
	'')
		echo root
		;;
esac
} #end function

function incap_pwd () {
echo -n incapsula://$incap_path_wd
if [[ -n $incap_path_name ]] ; then
	echo /${incap_path_name}:${incap_path_id}
else
	echo
fi
}

function incap_cc () {

if [[ -z $1 || x$1 == x/ ]] ; then # incap cc / ; incap cc
	unset incap_path_name incap_path_id incap_path_wd
	return
fi

case $1 in
	accounts|sites) 
		incap_path_wd=$1
		unset incap_path_name incap_path_id
		return
		;;
esac

[[ x$1 == x.. ]] && case $(incap_context) in
	accounts|sites)
		unset incap_path_wd
		return
	;;
	account|site)
		unset incap_path_name incap_path_id
		return
	;;
esac

case $(incap_context) in
accounts)
    read incap_path_id incap_path_name < <( 
	incap_accounts_ll $1 |
	egrep -v 'Account Name')
	[[ x$incap_path_id =~ ^x[0-9]+$ ]] || unset incap_path_id incap_path_name
;;

sites|account)
	res=$( incap_site_id $1 ) || return
    read incap_path_id incap_path_name cname <<< "$res"
	incap_path_wd=sites # If context is account
;;
esac
}

function incap_ll () {

if [[ x$1 == xaccounts ]] ; then
	if [[ -n $2 ]] ; then
		shift
		incap_sites_ll $1
	else
		incap_accounts_ll
	fi
	return
elif [[ x$1 == xsites ]] ; then
	if [[ -n $2 ]] ; then
		shift
		incap_site_status $1 | incap_site_summary
	else
		incap_sites_ll
	fi
	return
fi

case $(incap_context) in
	root)
		case x$1 in
			x)
				echo sites
				echo accounts
			;;
			xaccounts)
				incap_accounts_ls
			;;
			xsites)
				incapsula_sites_ll
			;;
			*)
				echo I dont understand your command
			;;
		esac
		return
	;;
	accounts)
		if [[ -n $1 ]] ; then
			incap_sites_ll $1
		else
			incap_accounts_ll
		fi
	;;
	sites)
		if [[ -n $1 ]] ; then
			incap_site_status $1 | incap_site_summary
		else
			incap_sites_ll
		fi
	;;
	account)
		if [[ -n $1 ]] ; then
			incap_site_status $1 | incap_site_summary
		else
			incap_sites_ll $incap_path_id
		fi
	;;
	site)
			incap_site_status $incap_path_id | json2bash
	;;
esac
}

incap_site_summary () {
cat /dev/stdin |
jq -r '
"Site Name"
	+ "\t = " +
		.domain?,

"Site Status"
	+ "\t = " +
		.status,

"Account ID"
	+ "\t = " +
		(.account_id|tostring),

"Origin"
	+ "\t = " +
		(.ips|join(",")), 

"Cache Mode"
	+ "\t = " +
		.performance_configuration.acceleration_level?,

"Block URLs"
	+ "\t = " +
		(.security.acls.rules[]|select(.id=="api.acl.blacklisted_urls")|[ .urls[].value ] | join(",") ),

"SSL CA"
	+ "\t = " +
		.ssl.generated_certificate.ca,

"SSL San"
	+ "\t = " +
		(.ssl.generated_certificate.san | join(",")),

"SSL Detection"
	+ "\t = " +
		(.ssl.origin_server.detected | tostring),

"SSL Detection Status"
	+ "\t = " +
		.ssl.origin_server.detectionStatus,

"SSL Validation Status"
	+ "\t = " +
		.ssl.generated_certificate.validation_status,

"DNS CNAME Record"
	+ "\t = " +
		({ dns: [(.dns[] | select(.set_type_to=="CNAME"))? ]} |
		if .[] | length == 1 then .dns[0].set_data_to | join(",") else "N/A" end ),

"DNS A Records"
	+ "\t = " +
		({ dns: [(.dns[] | select(.set_type_to=="A"))? ]} |
		if .[] | length == 1 then .dns[0].set_data_to | join(",") else "N/A" end )
	' | 
	column -x -t -s$'\t'
}

function incap_site_to_cols () {
local flow='
	{ 
	echo ... ;
	cat stdin ... |
	jq ...
	jq continues ; 
	} | {
	while read ... 
	}
	{} groups output of commands for pipe input/output'

	{ 
echo -e "Site Id\tSite Name\tAccount\tIPs\tCNAME" ;

/bin/cat /dev/stdin |
jq -r '
(.site_id|tostring) 
	+ "\t" +
.domain 
	+ "\t" +
(.account_id|tostring) 
	+ "\t" +
(.ips|join(",") | .[0:44] )
	+ "\t" +
({ dns: [(.dns[]|select(.set_type_to=="CNAME"))? ]} | if .[]|length==1 then .dns[0].set_data_to|join(",") else "N/A" end )' ; # end jq -r
	} | 
	column -x -t -s$'\t'
}


function incap () {

mkdir -p $incap_tmp_dir/sites

incap_cfg
local action=$1
[[ -z $action ]] && action=help
shift
incap_${action} "$@"
} # end function incap


