#!/bin/bash 


function dnsme_cfg () {
[[ x$1 == set ]] && unset dnsme_api_key dnsme_secret_key
[[ -z $dnsme_api_key ]] && read -p 'API Key: ' dnsme_api_key
[[ -z $dnsme_secret_key ]] && read -s -p 'API Secret Key: ' dnsme_secret_key
} # end function dnsme_configure

function dnsme_url () {
echo https://cp.dnsmadeeasy.com/dns/managed/$dnsme_id
}

function dnsme_umount () {
local alias="cd pwd context ls cat mk rm updatedb purge set" cmd
if [[ -n $dnsme_ps1_saved ]] ; then
	PS1="$dnsme_ps1_saved"
	unset dnsme_ps1_saved

	if [[ x$dnsme_alias =~ xon|xON ]] ; then
		for cmd in $alias ; do
			unalias $cmd
		done
		eval "$dnsme_alias_saved"
	fi

	echo dnsme mount OFF
fi
} # end function dnsme_umount

function dnsme_mount () {
local alias="cd pwd context ls cat mk rm updatedb purge set" cmd
if [[ -z $dnsme_ps1_saved ]] ; then
	dnsme_ps1_saved="$PS1"
	dnsme_alias_saved=$(alias)
	PS1='$(dnsme pwd) ]$ '

	if [[ x$dnsme_alias =~ xon|xON ]] ; then
		for cmd in $alias ; do
			alias $cmd="dnsme $cmd "
		done
	fi

	echo dnsme mount ON
fi
} # end function dnsme_mount

function dnsme_set() {
/bin/cat <<EOF
	dnsme_refresh   	= $dnsme_refresh
	dnsme_debug         = $dnsme_debug
	dnsme_alias         = $dnsme_alias
	dnsme_name          = $dnsme_name
	dnsme_id            = $dnsme_id
EOF
} # end function 

function dnsme_cat () {
case $(dnsme_context) in
root)
	if [[ -n $1 ]] ; then
		for dmn in $* ; do
			dnsme_get $dmn
		done
	else
		dnsme_get |
		jq -r '.data | sort_by("name") | { data: . }'
	fi	
;;
domain)
	if [[ -n $1 ]] ; then
		dnsme_get $dnsme_name |
		jq '.data[] | select(.id=='$1')'
	else
		dnsme_get $dnsme_name
	fi
;;
esac
} # end function

function dnsme_context () {
if [[ -n $dnsme_name ]] ; then
	echo domain
else
	echo root
fi
} # end function

function dnsme_ls_cache () {
	grep -l 'type' $dnsme_domains_dir/*
}

function dnsme_ls () {

case $(dnsme_context) in
root)
	if [[ -n $1 ]] ; then  
	# dnsme:// dnsme ls <domain>
		dnsme get $1 | dnsme_js2table
	else  
	# dnsme:// dnsme ls
		dnsme_ls_domains
	fi
;;
domain)
	if [[ -n $1 ]] ; then   
		# dnsme://<domain>:<domain id> dnsme ls <record id>
		dnsme get $dnsme_name | jq -c '.data[]|select(.id|tostring=="'$1'")' |  json2bash
	else
		# dnsme://<domain>:<domain id> dnsme ls
		dnsme get $dnsme_name | dnsme_js2table
	fi
;;
esac
} # end function 

function dnsme_mk () {
local domain id name type value ec
case $(dnsme_context) in
root)
	if [[ -n $1 ]] ; then 
		domain=$1
		dnsme_domain_mk domain=$domain
	fi
	ec=$?
	;;
domain)
	domain=$dnsme_name
	if (( ${#*} == 4 )) ; then
		id=$1
		shift
	fi
	name="$1"
	shift
	type=$1
	shift
	value="$*"
	if [[ -n $id ]] ; then
		dnsme_record_mk id=$id domain=$domain name="$name" type=$type value="$value"
	else
		dnsme_record_mk domain=$domain name="$name" type=$type value="$value"
	fi
	ec=$?
	;;
esac
if [[ x$? == x0 && -n $dnsme_refresh ]] ; then
	dnsme updatedb $domain
fi
} # end function dnsme_mk

function dnsme_rm () {
local name id
if [[ -z $dnsme_name ]] ; then
	read -r name id < <(dnsme_domain_id $1)
	[[ -n $name ]] && echo Run manually dnsme_domain_rm id=$id || echo No such domain $1
else
	if [[ -n $1 ]] ; then
		dnsme_record_rm domain=$dnsme_name ids="$*"
		if [[ x$? == x0 && -n $dnsme_refresh ]] ; then
			dnsme updatedb $dnsme_name
		fi
	fi
fi

} # end function dnsme_delete

function dnsme_pwd () {
echo -n dnsme://
if [[ -n $dnsme_name ]] ; then
	echo -n ${dnsme_name}:${dnsme_id}
fi
echo 
} # end function dnsme_pwd

function dnsme_cd () {
if [[ -z $1 || x$1 == x/ ]] ; then 
	unset dnsme_name dnsme_id
else 
	read -r dnsme_name dnsme_id < <(dnsme_domain_id $1)
	[[ -n $dnsme_name ]] || { echo No such domain $1 1>&2 ; return 1; } 
fi
} # end function

	
function dnsme_updatedb () {
local dmn=$1 dnsme_refresh=0 msg="Updating DNSME cache"

	[[ -n $dnsme_name ]] && dmn=$dnsme_name
	[[ -n $dmn ]] && msg="$msg & Domain $dmn cache"

	echo $msg...
	dnsme_get $dmn > /dev/zero
} # end function 

function dnsme () {

dnsme_refresh=3
dnsme_alias=off
dnsme_debug=off

dnsme_work_dir=/dev/shm/$USER/dnsme
dnsme_domains_dir=/dev/shm/$USER/dnsme/domains
dnsme_work_dir=$dnsme_work_dir/run
mkdir -p $dnsme_work_dir $dnsme_domains_dir

dnsme_cfg

local action=$1
shift
case x$action in
	xdomain|xrecord|xcache)
		action=${action}_$1
		shift
		dnsme_$action "$@" 
		# dnsme ls cache -> dnsme_ls_cache
		# dnsme domain rm 12345 -> dnsme_domain_rm 12345
	;;
	x)
		dnsme_help 
	;;
	*)
		dnsme_$action "$@" 
		# dnsme ls -> dnsme_ls
		# dnsme ls 12345 -> dnsme_ls 12345
	;;
esac	
} # end function dnsme
