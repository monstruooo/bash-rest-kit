#!/bin/bash

function incap_examples () {
# Turning rules[] from array to object with objects. 
# You can then extract rules like this: jq '.rules["api.acl.blacklisted_countries"]'

incap_site_status 101578098  | jq '.security.acls.rules[] | { (.id): .|del(.id) }' | jq -s 'add | { rules: . }'

}

incap_site_add () {

	local account_id=$1 domain=$2 site_ip=$3 site_id api_args res
	
	api_args="site_ip=$site_ip&domain=${domain}&account_id=${account_id}&send_site_setup_emails=false&force_ssl=true"
	echo Creating site $domain
	if res=$(incap_api "$api_args" https://my.incapsula.com/api/prov/v1/sites/add)
	then
	    site_id=$( incap_site_id $domain)
		echo -n "Setting ignore_ssl to read the incapdns record: "
		res=$(incap_api "site_id=${site_id}&param=ignore_ssl&value=true" api/prov/v1/sites/configure)
		echo $res | $jq .res_message
	else
	    echo Failed to create site
	    return 1
	fi
}

function incap_ssl_by_email () {

[[ -z $1 ]] && { return || exit ;  }
site_id=$(incapsula_site_id_from_name $1)

incap_api "site_id=$site_id&domain=$1" api/prov/v1/domain/emails | 
	jq -r '"\nApprover emails '$1':\n" , .domain_emails[] + "\n"'

echo Press Enter to skip
read -p "Validation Email: " ssl_email

[[ -z $ssl_email ]] && 
	{ return || exit ; }

    {
incap_api "site_id=$site_id&param=approver&value=$ssl_email" api/prov/v1/sites/configure ;
incap_api "site_id=$site_id&param=domain_validation&value=email" api/prov/v1/sites/configure ;
    } |
	jq -r '"", { domain, status, statusEnum, ssl, res, res_message, debug_info }'

} # end function incap_ssl_by_email

function incap_site_purge () {
local usage='
	purge cache <site id>
	purge hostname <site name>'

case $1 in
	cache)
		echo Purging site $2 cache...
		incap_api site_id=$2 api/prov/v1/sites/cache/purge | jq .
	;;
	hostname)
		echo Purging $3 from hostname cache...
		incap_api host_name=$2 api/prov/v1/sites/hostname/purge | jq .
	;;
	*)
		echo Usage: "$usage" 1>&2
	;;
esac
}

function incap_ddos_threshold () {
local id=$1 ddos_threshold=$2 data
[[ -z $2 ]] && return 1
data="site_id=${id}&rule_id=api.threats.ddos&activation_mode=api.threats.ddos.activation_mode.auto&ddos_traffic_threshold=${ddos_threshold}"
if res=$(incap_api "$data" api/prov/v1/sites/configure/security)
then
	echo $res | jq '.security.waf.rules[] |  select(.id=="api.threats.ddos")'
fi
}

function incap_site_ip () { 
local usage='
	incap site ip <site_id> <ip|hostname>'

if [[ -z $2 ]] ; then
	echo Usage: "$usage" 1>&2
	return 1
else
	local id=$1 ip=$2
fi
	
local old_ips res
old_ips=$(incap_site_status $id | jq '.ips')
res=$( incap_api "site_id=$id&param=site_ip&value=$ip" api/prov/v1/sites/configure ) || return 
echo $res | jq '.|={site_id , domain , new_ips: .ips} | .old_ips='"$old_ips"
} # end function
