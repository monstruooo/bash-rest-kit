#!/bin/bash 

dnsme_autorefresh=3
dnsme_autoupdate=ON

function dnsme_cfg () {
[[ x$1 == set ]] && unset dnsme_api_key dnsme_secret_key
[[ -z $dnsme_api_key ]] && read -p 'API Key: ' dnsme_api_key
[[ -z $dnsme_secret_key ]] && read -s -p 'API Secret Key: ' dnsme_secret_key
} # end function dnsme_configure


function dnsme_autoupdate () {
	 [[ x$dnsme_autoupdate == xON ]] && return 0 || return 1
}

function dnsme_url () {
echo https://cp.dnsmadeeasy.com/dns/managed/$dnsme_dmn_id
}

function dnsme_mount () {
if [[ -n $dnsme_ps1_saved ]] ; then
	PS1="$dnsme_ps1_saved"
	unset dnsme_ps1_saved
	echo dnsme $1 OFF
else
	[[ x$2 == x[Oo][Ff][Ff] ]] && { echo dnsme $1 OFF ; return ; }
	dnsme_ps1_saved="$PS1"
	PS1='$(dnsme pwd) ]$ '
	echo dnsme $1 ON
fi
} # end function 

function dnsme_set() {
cat <<EOF
	dnsme_autoupdate    = $dnsme_autoupdate
	dnsme_autorefresh   = $dnsme_autorefresh
	dnsme_dmn           = $dnsme_dmn
	dnsme_dmn_id        = $dnsme_dmn_id
EOF
} # end function 

function dnsme_cat () {
if [[ -z $dnsme_dmn ]] ; then
	if [[ -n $1 ]] ; then
		for dmn in $* ; do
			dnsme_get $dmn
		done
	else
		dnsme_get |
		jq -r '.data | sort_by("name") | { data: . }'
	fi	
else
	if [[ -z $1 ]] ; then
		dnsme_get $dnsme_dmn
	else
debug="------------------"${FUNCNAME[0]}
		dnsme_get $dnsme_dmn |
		jq '.data[] | select(.id=='$1')'
	fi
fi
} # end function dnsme_cat

function dnsme_ls () {
if [[ -z $dnsme_dmn ]] ; then
	if [[ -n $1 ]] ; then
		musing='Disabled it temporarily using this cool trick.
				Its probably better to just print records'
		[[ "" ]] &&
		dnsme get | 
		jq -r ' .data[] | select(.name=="'$1'" or (.id|tostring)=="'$1'")' |
		json2bash
		# dnsme_api $dnsme_dmn_id

		dnsme get $1 | dnsme_records_table
	else
			{
		echo -e "Domain Id \t Domain name" ;
		dnsme get |
		jq -r ' .data | sort_by("name") | .[] | (.id |tostring) + " \t " + .name' ;
			} | 
		column -x -t -s $'\t'
	fi
elif [[ -n $1 ]] ; then
	dnsme get $dnsme_dmn | jq -c '.data[]|select(.id|tostring=="'$1'")' |  json2bash
else
	dnsme get $dnsme_dmn | dnsme_records_table
fi
} #end function dnsme_ls

function dnsme_mk () {
local domain id name type value
if [[ -z $dnsme_dmn ]] ; then 
	[[ -n $1 ]] && dnsme_domain_mk domain=$1
else
	if (( ${#*} == 4 )) ; then
		id=$1
		shift
	fi
	name="$1"
	shift
	type=$1
	shift
	value="$*"
	if [[ -n $id ]] ; then
		dnsme_record_mk id=$id domain=$dnsme_dmn name="$name" type=$type value="$value"
	else
		dnsme_record_mk domain=$dnsme_dmn name="$name" type=$type value="$value"
	fi
fi
} # end function dnsme_mk

function dnsme_rm () {
if [[ -z $dnsme_dmn ]] ; then
	echo Run manually dnsme_domain_rm id=$(dnsme_domain_id $1)
else
	if [[ -n $1 ]] ; then
		dnsme_record_rm domain=$dnsme_dmn ids="$*"
		if [[ $?==0 ]] ; then dnsme_autoupdate && dnsme updatedb $dnsme_dmn; fi
	fi
fi

} # end function dnsme_delete

function dnsme_pwd () {
echo -n dnsme://
if [[ -n $dnsme_dmn ]] ; then
	echo -n ${dnsme_dmn}:${dnsme_dmn_id}
	# [[ -n $dnsme_rcrd ]] && echo -n $dnsme_rcrd
fi
echo 
} # end function dnsme_pwd

function dnsme_cd () {
local path=$( echo $1 | sed -r 's,(dnsme:/)?/,,')
if [[ -z $path ]] ; then unset dnsme_dmn dnsme_dmn_id
else 
	if [[ -n $path ]] ; then
		local x
		x=$(dnsme_domain_id $1) || { echo No such domain $path 1>&1 ; return 1; } 
		dnsme_dmn_id=$x 
		dnsme_dmn=$path
	else
		unset dnsme_dmn dnsme_dmn_id
	fi
fi
} # end function dnsme_cd

function dnsme () {

DNSME_TMP_DIR=/dev/shm/$USER/tmp/dnsme
mkdir -p $DNSME_TMP_DIR

dnsme_cfg
local action=$1
[[ -z $action ]] && action=help
shift
dnsme_${action} "$@"
} # end function dnsme
	
function dnsme_updatedb () {
    local dmn
	[[ -n $dnsme_dmn ]] && dmn=$dnsme_dmn
	local msg="Updating DNSME cache"
    [[ -n $1 ]] && dmn=$1 
	[[ -n $dmn ]] && msg="$msg & Domain $dmn cache"
	echo $msg...
    dnsme_autorefresh=0 dnsme_get $dmn > /dev/zero
} # end

function dnsme_help () {
cat << 'EOF'

You activate dnsme by sourcing the all files that end with .functions and running dnsme 

On the first run, dnsme would prompt you for API credentials .Make sure you have YOUR DNSME api key and secret key. 

dnsme understands these commands:
bye 
cat
cd
ls
mk
mount 
pwd
set 
updatedb

dnsme pwd would print your current context. It can be either root dnsme:// or domain dnsme://<domain>:<domain id>
There are two contexts: root and domain 
To switch to root, type dnsme cd. You will see
dnsme://
If you 
To switch to domain, type cd <domain>. If you have test.com
dnsme://<domain>:<domain id> 

EOF
}
