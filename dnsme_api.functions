#!/bin/bash

dnsme_tmp_dir=/dev/shm/$USER/tmp/dnsme
mkdir -p $dnsme_tmp_dir

dnsme_debug=off

function dnsme_debug () {
	[[ x$dnsme_debug =~ x[Oo][Nn] ]] && echo "$*" 1>&2
} 

function dnsme_api () {

local dnsme_url=https://api.dnsmadeeasy.com
[[ x$sandbox == x1 ]] && dnsme_url=https://api.sandbox.dnsmadeeasy.com

dnsme_throttle # Checking that the request rate is not exceeded

request_date=$(
{ echo -n "$(date -u -R) " ; date -u +%Z ; } | cut -s -d' ' -f1-5,7
)

hmac=$(echo -n "$request_date" | openssl sha1 -hmac "$dnsme_secret_key" | sed 's/.*= //g')

# http headers
api_key_H="x-dnsme-apiKey:$dnsme_api_key"
hmac_H="x-dnsme-hmac:$hmac"
req_date_H="x-dnsme-requestDate:$request_date"
content_type_H="content-type:application/json"
accept_type_H="accept:application/json"
local api_uri=$1
shift
api_uri=${api_uri#*/dns/managed/} # backward compatibility for calls that use full url instead of uri

res=$(curl -k -s -S -H "$api_key_H" -H "$hmac_H" -H "$req_date_H" -H "$content_type_H" -H "$accept_type_H" $dnsme_url/V2.0/dns/managed/$api_uri "$@" 2>&1 ) ||
{ code=$? ; jqres code=$code src=${FUNCMAME[0]} msg="Curl failed: $res" 2>&1 ; return $code ; }

if [[ -z $res ]] ; then
	# jq -n '{ res: { code: 0, message: "No Output. No curl errors either" , source: "Oskar" } }'
	return 0
fi

# For some reason dnsme returns errors as jq filter instead of json	
if jq -n -e "$(echo $res | cut -c 1-333) | .error" >/dev/zero 2>&1 ; then
local logic='
	Reconstructing error can save you a lot of time troubleshooting'
	jq -n -e "$( echo $res | cut -c 1-333) | { error: .error }" 1>&2 
	return 1
fi

if ! echo $res | is_json ; then 
	jqres code=1 source=${FUNCNAME[0]} msg="DNSME Request failed. Response is not json" 1>&2
local logic='
	if response is not json. DNSME returns web pages on some errors'
    echo $res | grep -q '<html>' && echo $res | lynx -dump --stdin 1>&2 || echo $res 1>&2
    return 2
fi

echo $res 
} # end function

function dnsme_throttle () {
local LIMIT=150 FRAME=5 # Request limit is 150 per 5 min
dnsme_req_times=( $(date +%s) ${dnsme_req_times[@]} )
local debug="dnsme_req_times: ${dnsme_req_times[@]}"

(( ${#dnsme_req_times[@]} < 150 )) && return 0
unset dnsme_req_times[150]
local start=${dnsme_req_times[149]}
local frame_end=$(( start + FRAME*60 ))
if (( frame_end > $(date +%s) )) ; then
	local secs_wait=$(( frame_end - $(date +%s) ))
	jqres code=0 src=${FUNCNAME[0]} msg="Rate limit exceeded. Waiting $secs_wait seconds" time="$(date)" 1>&2
	sleep $secs_wait
else
	return 0 
fi
}

function dnsme_get () {
local info='
	If no argument is provided the function exits after pulling the list of domains '

local cache=$dnsme_tmp_dir/all.domains
mkdir -p $( dirname $cache)
local logic='( if cache not json or ( refresh set and cache is older than refresh), then refresh cache
Also means: if cache is json and refresh unset, then dont refresh cache'
if ! /bin/cat $cache | is_json || ( [[ -n $dnsme_autorefresh ]] && find $cache -mmin +${dnsme_autorefresh:-0} 2>/dev/zero | egrep -q [a-z]+ )
then
	# echo Updating DNSME domain cache 1>&2
	dnsme_api http://api.dnsmadeeasy.com/V2.0/dns/managed/ > $cache
fi

if [[ -z $1 ]] ; then
	jq . $cache
	return
fi

local name id
read -r name id < <(jq -j '.data[] | select((.id|tostring)=="'$1'" or .name=="'$1'") | .name , " ", .id' $cache)
[[ -n $id ]] || { jqres code=1 src=${FUNCNAME[0]} msg="No domain with id or name $1" 1>&2 ; return 1 ; }

local dmn_cache=$dnsme_tmp_dir/$name
local bash_syntax='
	find -mmin +3
		Finds files modified more than 3 minutes ago
	find -mmin -3
		Finds files modified less than 3 minutes ago
	find -mmin -0
		Never finds anything'
if ! /bin/cat $dmn_cache 2>/dev/zero | is_json || ( [[ -n $dnsme_autorefresh ]] && find $dmn_cache -mmin +${dnsme_autorefresh:-0} 2>/dev/zero | egrep -q [a-z]+ ) ; then
	dnsme_api $id/records  > $dmn_cache
fi
jq . $dmn_cache
} # end function dnsme_get

function dnsme_domain_id () { local domain_name=$1 domain_id
    dnsme_get | jq -e -j '.data[] | select(.name=="'$1'" or (.id|tostring)=="'$1'") | .name , " " , .id' 
} # end function

function dnsme_domains_ll () {
	{
	echo -e "Domain Id \t Domain name" ;
	dnsme get |
	jq -r ' .data | sort_by("name") | .[] | (.id |tostring) + " \t " + .name' ;
	} | 
	column -x -t -s $'\t'
}

function dnsme_purge () {
# purge deleted domains
local domains cached_domains
domains=$( dnsme cd ; dnsme ll | awk '{print $2}' | sed 1d )
cached_domains=$( find $dnsme_tmp_dir/* | egrep -v 'all.domains|res')
diff -Bb -y <(echo "$cached_domains") <( echo "$domains") --suppress-common-lines | 
egrep '<$' | awk '{print "'$dnsme_tmp_dir'/" $1}' | xargs /bin/rm -fv
}
