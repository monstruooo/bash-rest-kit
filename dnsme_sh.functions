#!/bin/bash 

dnsme_autorefresh=3
dnsme_autoupdate=ON
dnsme_alias=ON

function dnsme_cfg () {
[[ x$1 == set ]] && unset dnsme_api_key dnsme_secret_key
[[ -z $dnsme_api_key ]] && read -p 'API Key: ' dnsme_api_key
[[ -z $dnsme_secret_key ]] && read -s -p 'API Secret Key: ' dnsme_secret_key
} # end function dnsme_configure

function dnsme_alias () {
	 echo $dnsme_alias | egrep -q -i on && return 0 || return 1
}

function dnsme_autoupdate () {
	 [[ x$dnsme_autoupdate == xON ]] && return 0 || return 1
}

function dnsme_url () {
echo https://cp.dnsmadeeasy.com/dns/managed/$dnsme_dmn_id
}

function dnsme_mount () {
local alias="cd ls cat mk rm updatedb purge" cmd
if [[ -n $dnsme_ps1_saved ]] ; then
	PS1="$dnsme_ps1_saved"
	unset dnsme_ps1_saved

	if dnsme_alias ; then
		for cmd in $alias ; do
			unalias $cmd
		done
		eval "$dnsme_alias_saved"
	fi
	echo dnsme mount OFF
else
	[[ x$2 == x[Oo][Ff][Ff] ]] && { echo dnsme $1 OFF ; return ; }
	dnsme_ps1_saved="$PS1"
	PS1='$(dnsme pwd) ]$ '

	if dnsme_alias ; then
		for cmd in $alias ; do
			alias $cmd="dnsme $cmd "
		done
		dnsme_alias_saved=$( alias )
	fi
	echo dnsme mount ON
fi
} # end function 

function dnsme_set() {
cat <<EOF
	dnsme_autoupdate    = $dnsme_autoupdate
	dnsme_autorefresh   = $dnsme_autorefresh
	dnsme_dmn           = $dnsme_dmn
	dnsme_dmn_id        = $dnsme_dmn_id
EOF
} # end function 

function dnsme_cat () {
case $(dnsme_context) in
root)
	if [[ -n $1 ]] ; then
		for dmn in $* ; do
			dnsme_get $dmn
		done
	else
		dnsme_get |
		jq -r '.data | sort_by("name") | { data: . }'
	fi	
;;
domain)
	if [[ -n $1 ]] ; then
		dnsme_get $dnsme_dmn |
		jq '.data[] | select(.id=='$1')'
	else
		dnsme_get $dnsme_dmn
	fi
;;
esac
} # end function dnsme_cat

function dnsme_context () {
if [[ -n $dnsme_dmn ]] ; then
	echo domain
else
	echo root
fi
} # end function

function dnsme_ls () {

case $(dnsme_context) in
root)
	if [[ -n $1 ]] ; then  
	# dnsme:// dnsme ls <domain>
		dnsme get $1 | dnsme_records_table
	else  
	# dnsme:// dnsme ls
		dnsme_domains_ls
	fi
;;
domain)
	if [[ -n $1 ]] ; then   
		# dnsme://<domain>:<domain id> dnsme ls <record id>
		dnsme get $dnsme_dmn | jq -c '.data[]|select(.id|tostring=="'$1'")' |  json2bash
	else
		# dnsme://<domain>:<domain id> dnsme ls
		dnsme get $dnsme_dmn | dnsme_records_table
	fi
;;
esac
} #end function dnsme_ls

function dnsme_mk () {
local domain id name type value
if [[ -z $dnsme_dmn ]] ; then 
	[[ -n $1 ]] && dnsme_domain_mk domain=$1
else
	if (( ${#*} == 4 )) ; then
		id=$1
		shift
	fi
	name="$1"
	shift
	type=$1
	shift
	value="$*"
	if [[ -n $id ]] ; then
		dnsme_record_mk id=$id domain=$dnsme_dmn name="$name" type=$type value="$value"
	else
		dnsme_record_mk domain=$dnsme_dmn name="$name" type=$type value="$value"
	fi
fi
} # end function dnsme_mk

function dnsme_rm () {
if [[ -z $dnsme_dmn ]] ; then
	echo Run manually dnsme_domain_rm id=$(dnsme_domain_id $1)
else
	if [[ -n $1 ]] ; then
		dnsme_record_rm domain=$dnsme_dmn ids="$*"
		if [[ $?==0 ]] ; then dnsme_autoupdate && dnsme updatedb $dnsme_dmn; fi
	fi
fi

} # end function dnsme_delete

function dnsme_pwd () {
echo -n dnsme://
if [[ -n $dnsme_dmn ]] ; then
	echo -n ${dnsme_dmn}:${dnsme_dmn_id}
fi
echo 
} # end function dnsme_pwd

function dnsme_cd () {
if [[ -z $1 ]] ; then 
	unset dnsme_dmn dnsme_dmn_id
else 
	local id
	id=$(dnsme_domain_id $1) || { echo No such domain $1 1>&2 ; return 1; } 
	dnsme_dmn_id=$id dnsme_dmn=$1
fi
} # end function dnsme_cd

function dnsme () {

DNSME_TMP_DIR=/dev/shm/$USER/tmp/dnsme
mkdir -p $DNSME_TMP_DIR

dnsme_cfg
local action=$1
[[ -z $action ]] && action=help
shift
dnsme_${action} "$@"
} # end function dnsme
	
function dnsme_updatedb () {
local dnsme_autorefresh=0 dmn
	[[ -n $dnsme_dmn ]] && dmn=$dnsme_dmn
	local msg="Updating DNSME cache"
    [[ -n $1 ]] && dmn=$1 
	[[ -n $dmn ]] && msg="$msg & Domain $dmn cache"
	echo $msg...
	dnsme_get $dmn > /dev/zero
} # end function 
