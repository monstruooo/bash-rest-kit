#!/bin/bash

function incap_cfg () {
[[ -z $incap_api_id ]] && read -s "API Key: " incap_api_id
[[ -z $incap_api_key ]] && read -s "API Key: " incap_api_id
}

function incap_js () {

if [[ x$1 == xaccounts ]] ; then
	shift
	if [[ -n $1 ]] ; then
		incap_js_sites $1
	else
		incap_js_accounts
	fi
elif [[ x$1 == xsites ]] ; then
	shift
	if [[ -n $1 ]] ; then
		incap_js_sites $1 
	else
		incap_js_sites
	fi
fi

}

function incap_ll () {

if [[ x$1 == xaccounts ]] ; then
	shift
	if [[ -n $1 ]] ; then
		incap_ll_sites $1
	else
		incap_ll_accounts
	fi
	return
elif [[ x$1 == xsites ]] ; then
	shift
	if [[ -n $1 ]] ; then
		incap_js_sites $1 | incap_site_summary
	else
		incap_js_sites | incap_js2table
	fi
	return
elif [[ x$1 == xorigins ]] ; then
	shift
	if [[ -n $1 ]] ; then
		{ echo -e "Site Id \t Site Name \t IPs" ;
		incap_js_sites | 
			jq -j -r 'select(.ips|inside(["'"$1"'"])) | .site_id, " \t " , .domain , " \t " , (.ips|join(",")) , "\n"' ;
		} | tabs2cols
	else
		{ echo -e "Origin \t Number of Sites" ;
		incap_js_sites | jq -r '.ips[]' | sort | uniq -c | sort -r -n -k 1 | awk '{print $2 " \t " $1}' ; } |
		tabs2cols
	fi
	return
elif [[ x$1 == xfiles ]] ; then
	shift
	if [[ x$1 == xsites ]] ; then
		find $incap_work_dir/sites -regextype posix-extended -regex "\S+/[^/]+_[0-9]+$" | sort -V
	elif [[ x$1 == xaccounts ]] ; then
		find $incap_work_dir/accounts/account_page-[0-9]* | sort -V
	else
		echo accounts
		echo sites
	fi
	return
fi

case $(incap_context) in
	root)
		echo sites
		echo accounts
		echo origins
		echo files
	;;	
	site)
		incap_js_sites $incap_path_id | json2bash
	;;
esac
}

incap_site_summary () {
cat /dev/stdin |
jq -r '
"Site ID"
	+ "\t = " +
		(.site_id?|tostring),

"Site Name"
	+ "\t = " +
		.domain?,

"Site Status"
	+ "\t = " +
		.status,

"Account ID"
	+ "\t = " +
		(.account_id|tostring),

"Origin"
	+ "\t = " +
		(.ips|join(",")), 

"Cache Mode"
	+ "\t = " +
		.performance_configuration.acceleration_level?,

"Block URLs"
	+ "\t = " +
		(.security.acls.rules[]|select(.id=="api.acl.blacklisted_urls")|[ .urls[].value ] | join(",") ),

"SSL CA"
	+ "\t = " +
		.ssl.generated_certificate.ca,

"SSL San"
	+ "\t = " +
		(.ssl.generated_certificate.san | join(",")),

"SSL Detection"
	+ "\t = " +
		(.ssl.origin_server.detected | tostring),

"SSL Detection Status"
	+ "\t = " +
		.ssl.origin_server.detectionStatus,

"SSL Validation Status"
	+ "\t = " +
		.ssl.generated_certificate.validation_status,

"DNS CNAME Record"
	+ "\t = " +
		({ dns: [(.dns[] | select(.set_type_to=="CNAME"))? ]} |
		if .[] | length == 1 then .dns[0].set_data_to | join(",") else "N/A" end ),

"DNS A Records"
	+ "\t = " +
		({ dns: [(.dns[] | select(.set_type_to=="A"))? ]} |
		if .[] | length == 1 then .dns[0].set_data_to | join(",") else "N/A" end )
	' | 
	tabs2cols
}

function incap_js2table () {
local flow='
	{ 
	echo ... ;
	cat stdin ... |
	jq ...
	jq continues ; 
	} | {
	while read ... 
	}
	{} groups output of commands for pipe input/output'

	{ 
echo -e "Site Id\tSite Name\tAccount\tIPs\tCNAME" ;

/bin/cat /dev/stdin |
jq -r '
(.site_id|tostring) 
	+ "\t" +
.domain 
	+ "\t" +
(.account_id|tostring) 
	+ "\t" +
(.ips|join(",") | .[0:44] )
	+ "\t" +
({ dns: [(.dns[]|select(.set_type_to=="CNAME"))? ]} | if .[]|length==1 then .dns[0].set_data_to|join(",") else "N/A" end )' ; # end jq -r
	} | 
	tabs2cols
}


function incap () {

incap_work_dir=/dev/shm/$USER/incapsula
accounts_dir=$incap_work_dir/accounts sites_dir=$incap_work_dir/sites
mkdir -p $accounts_dir $sites_dir

incap_cfg
local action=$1
shift
case x$action in
	xsite)	
		action=$1
		shift
		incap_site_${action} "$@"
		# incap site ip 12345 1.2.3.4 -> incap_site_ip 12345 1.2.3.4
		;;
	x)
		incap_help
		;;
	*)
		incap_${action} "$@"
		# incap purge cache 12345 -> incap_purge cache 12345
		;;
esac
		
} # end function incap


